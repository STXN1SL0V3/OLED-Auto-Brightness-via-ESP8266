/*
 * ESP8266 AutoBrightness
 * Copyright (C) 2025 STXN1SL0V3
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>

// ===== –ù–ê–°–¢–†–û–ô–ö–ò WiFi =====
// –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ WiFi
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô IP –ê–î–†–ï–° =====
// –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å–µ—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DHCP)
IPAddress local_IP(192, 168, 1, 146);      // IP –∞–¥—Ä–µ—Å ESP8266
IPAddress gateway(192, 168, 1, 1);         // IP –≤–∞—à–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);
IPAddress secondaryDNS(8, 8, 4, 4);

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –î–ê–¢–ß–ò–ö–ê =====
const int LIGHT_SENSOR_PIN = A0;  // –ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä–∞
const int READ_INTERVAL = 1000;   // –ò–Ω—Ç–µ—Ä–≤–∞–ª —á—Ç–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ (–º—Å) - 1 –ì—Ü

// ===== –ê–î–†–ï–°–ê EEPROM –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ò =====
#define EEPROM_SIZE 16
#define EEPROM_MAGIC 0xAB  // –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
#define ADDR_MAGIC 0
#define ADDR_MIN_LOW 1
#define ADDR_MIN_HIGH 2
#define ADDR_MAX_LOW 3
#define ADDR_MAX_HIGH 4

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–õ–ò–ë–†–û–í–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ =====
int minLightValue = 50;     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ (—Ç–µ–º–Ω–æ)
int maxLightValue = 900;    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ (—Å–≤–µ—Ç–ª–æ)

// ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
ESP8266WebServer server(80);
int currentLightLevel = 0;
unsigned long lastReadTime = 0;

// ===== –§–£–ù–ö–¶–ò–ò =====

void setup() {
  Serial.begin(115200);
  delay(100);
  
  Serial.println("\n\n=================================");
  Serial.println("üîÜ OLED Auto Brightness v2.0");
  Serial.println("=================================\n");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EEPROM
  EEPROM.begin(EEPROM_SIZE);
  loadCalibrationFromEEPROM();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–∞ –¥–∞—Ç—á–∏–∫–∞
  pinMode(LIGHT_SENSOR_PIN, INPUT);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  connectToWiFi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
  setupWebServer();
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  server.begin();
  Serial.println("‚úì HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
  Serial.print("‚úì IP –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.localIP());
  Serial.println("\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ: http://" + WiFi.localIP().toString());
  Serial.println("=================================\n");
}

void loop() {
  // –í–ê–ñ–ù–û: handleClient() –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —á–∞—â–µ
  server.handleClient();
  yield();  // –î–∞—ë–º ESP8266 –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É WiFi
  
  // –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  if (millis() - lastReadTime >= READ_INTERVAL) {
    lastReadTime = millis();
    readLightSensor();
  }
}

void connectToWiFi() {
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi");
  WiFi.mode(WIFI_STA);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP
  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("\n‚úó –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP!");
  }
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úì WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.print("‚úì IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi!");
    Serial.println("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
    delay(5000);
    ESP.restart();
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° EEPROM =====

void loadCalibrationFromEEPROM() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ EEPROM
  byte magic = EEPROM.read(ADDR_MAGIC);
  
  if (magic == EEPROM_MAGIC) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    minLightValue = (EEPROM.read(ADDR_MIN_HIGH) << 8) | EEPROM.read(ADDR_MIN_LOW);
    maxLightValue = (EEPROM.read(ADDR_MAX_HIGH) << 8) | EEPROM.read(ADDR_MAX_LOW);
    
    Serial.println("‚úì –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏:");
    Serial.print("  MIN: ");
    Serial.println(minLightValue);
    Serial.print("  MAX: ");
    Serial.println(maxLightValue);
  } else {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    Serial.println("‚ö† –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    saveCalibrationToEEPROM();
  }
}

void saveCalibrationToEEPROM() {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ
  EEPROM.write(ADDR_MAGIC, EEPROM_MAGIC);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2 –±–∞–π—Ç–∞)
  EEPROM.write(ADDR_MIN_LOW, minLightValue & 0xFF);
  EEPROM.write(ADDR_MIN_HIGH, (minLightValue >> 8) & 0xFF);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2 –±–∞–π—Ç–∞)
  EEPROM.write(ADDR_MAX_LOW, maxLightValue & 0xFF);
  EEPROM.write(ADDR_MAX_HIGH, (maxLightValue >> 8) & 0xFF);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ EEPROM
  EEPROM.commit();
  
  Serial.println("üíæ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å:");
  Serial.print("  MIN: ");
  Serial.println(minLightValue);
  Serial.print("  MAX: ");
  Serial.println(maxLightValue);
}

void setupWebServer() {
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π - —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  server.on("/", HTTP_GET, []() {
    server.sendHeader("Cache-Control", "max-age=3600");  // –ö–µ—à –Ω–∞ 1 —á–∞—Å
    String html = getWebPage();
    server.send(200, "text/html; charset=utf-8", html);
  });
  
  // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ (JSON) - –±–µ–∑ —Ä–∞—Å—á—ë—Ç–∞ —è—Ä–∫–æ—Å—Ç–∏
  server.on("/api/brightness", HTTP_GET, []() {
    // –û—Ç–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    // –†–∞—Å—á—ë—Ç —è—Ä–∫–æ—Å—Ç–∏ –¥–µ–ª–∞–µ—Ç Python
    String json = "{\"light_level\":";
    json += currentLightLevel;
    json += ",\"min_light\":";
    json += minLightValue;
    json += ",\"max_light\":";
    json += maxLightValue;
    json += "}";
    server.send(200, "application/json", json);
  });
  
  // API –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–∏–Ω–∏–º—É–º–∞
  server.on("/api/calibrate/min", HTTP_GET, []() {
    minLightValue = analogRead(LIGHT_SENSOR_PIN);
    saveCalibrationToEEPROM();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
    String response = "OK: Min = " + String(minLightValue) + " (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)";
    server.send(200, "text/plain; charset=utf-8", response);
  });
  
  // API –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–∞–∫—Å–∏–º—É–º–∞
  server.on("/api/calibrate/max", HTTP_GET, []() {
    maxLightValue = analogRead(LIGHT_SENSOR_PIN);
    saveCalibrationToEEPROM();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
    String response = "OK: Max = " + String(maxLightValue) + " (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)";
    server.send(200, "text/plain; charset=utf-8", response);
  });
  
  // API –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  server.on("/api/calibrate/reset", HTTP_GET, []() {
    minLightValue = 50;
    maxLightValue = 900;
    saveCalibrationToEEPROM();
    server.send(200, "text/plain; charset=utf-8", "OK: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
  });
}

void readLightSensor() {
  // –ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –¥–∞—Ç—á–∏–∫ - –≤–µ—Å—å —Ä–∞—Å—á—ë—Ç –¥–µ–ª–∞–µ—Ç Python
  currentLightLevel = analogRead(LIGHT_SENSOR_PIN);
  
  // –í—ã–≤–æ–¥ –≤ Serial –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint >= 5000) {
    Serial.print("üí° –î–∞—Ç—á–∏–∫: ");
    Serial.print(currentLightLevel);
    Serial.print(" (–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: ");
    Serial.print(minLightValue);
    Serial.print("-");
    Serial.print(maxLightValue);
    Serial.println(")");
    lastPrint = millis();
  }
}

String getWebPage() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
  String html = "";
  html.reserve(2048);  // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –∑–∞—Ä–∞–Ω–µ–µ
  
  html = "<!DOCTYPE html><html><head>";
  html += "<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<title>OLED Brightness</title>";
  html += "<style>body{font-family:Arial;background:#1a1a1a;color:#fff;padding:20px}";
  html += ".c{max-width:600px;margin:0 auto;background:#2b2b2b;padding:30px;border-radius:10px}";
  html += "h1{color:#0f8;text-align:center}.info{background:#333;padding:15px;border-radius:5px;margin:10px 0}";
  html += ".v{font-size:24px;color:#0f8;font-weight:bold}";
  html += "button{background:#0f8;color:#000;border:none;padding:10px 20px;border-radius:5px;cursor:pointer;margin:5px}";
  html += ".bar{background:#444;height:30px;border-radius:5px;overflow:hidden}";
  html += ".bar>div{background:#0f8;height:100%;transition:width .3s}</style>";
  
  html += "<script>let a=1;function u(){if(!a)return;fetch('/api/brightness').then(r=>r.json()).then(d=>{";
  html += "document.getElementById('l').innerText=d.light_level;";
  html += "}).catch(e=>console.log(e))}";
  html += "function t(){a=!a;document.getElementById('t').innerText=a?'‚è∏':'‚ñ∂';if(a)u()}";
  html += "setInterval(u,3000);u()</script></head><body><div class='c'>";
  html += "<h1>üîÜ OLED Brightness</h1>";
  html += "<div style='text-align:center'><button id='t' onclick='t()' style='background:#fa0'>‚è∏</button></div>";
  
  html += "<div class='info'><h3>–î–∞—Ç—á–∏–∫ —Å–≤–µ—Ç–∞:</h3><div class='v' id='l'>";
  html += currentLightLevel;
  html += "</div></div>";
  
  html += "<div class='info'><h3>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</h3>";
  html += "<p>1. –ó–∞–∫—Ä–æ–π—Ç–µ –¥–∞—Ç—á–∏–∫ ‚Üí <button onclick=\"fetch('/api/calibrate/min').then(r=>r.text()).then(alert)\">MIN</button></p>";
  html += "<p>2. –§–æ–Ω–∞—Ä–∏–∫ –Ω–∞ –¥–∞—Ç—á–∏–∫ ‚Üí <button onclick=\"fetch('/api/calibrate/max').then(r=>r.text()).then(alert)\">MAX</button></p>";
  html += "<p><button onclick=\"if(confirm('–°–±—Ä–æ—Å?'))fetch('/api/calibrate/reset').then(r=>r.text()).then(alert)\" style='background:#f44'>–°–±—Ä–æ—Å</button></p></div>";
  
  html += "<div class='info'><p><b>IP:</b> ";
  html += WiFi.localIP().toString();
  html += "</p><p><b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> ";
  html += minLightValue;
  html += " - ";
  html += maxLightValue;
  html += "</p></div></div></body></html>";
  
  return html;
}
