"""
–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é OLED –æ—Ç ESP8266
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ http://192.168.1.146 –∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —è—Ä–∫–æ—Å—Ç—å
"""

import tkinter as tk
from tkinter import ttk
import win32con
import requests
import threading
import time
import pystray
from PIL import Image, ImageDraw
import configparser
import os


class SimpleBrightnessControl:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.control_window = tk.Tk()
        self.control_window.title("üîÜ OLED Auto Brightness")
        self.control_window.geometry("450x350")
        self.control_window.resizable(False, False)
        self.control_window.configure(bg='#2b2b2b')
        self.control_window.attributes('-topmost', True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        icon_path = os.path.join(os.path.dirname(__file__), 'icon.ico')
        if os.path.exists(icon_path):
            try:
                self.control_window.iconbitmap(icon_path)
            except:
                pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config.ini)
        self.overlay = None
        self.current_brightness = 100
        self.target_brightness = 100  # –¶–µ–ª–µ–≤–∞—è —è—Ä–∫–æ—Å—Ç—å
        self.connected = False
        self.running = True
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        self.tray_icon = None
        self.window_visible = True
        self.icon_path = icon_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è —Ç—Ä–µ—è
        
        # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        self.brightness_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —è—Ä–∫–æ—Å—Ç–∏
        self.last_average_time = time.time()
        
        self.create_interface()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
        self.smooth_thread = threading.Thread(target=self.smooth_brightness_loop, daemon=True)
        self.smooth_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.auto_thread = threading.Thread(target=self.auto_brightness_loop, daemon=True)
        self.auto_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è overlay (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é)
        self.overlay_update_thread = threading.Thread(target=self.overlay_update_loop, daemon=True)
        self.overlay_update_thread.start()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.control_window.after(500, self.connect_to_esp)
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.ini"""
        config = configparser.ConfigParser()
        config_path = os.path.join(os.path.dirname(__file__), 'config.ini')
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_brightness = 20
        self.max_brightness = 100
        self.averaging_period = 60
        self.esp_ip = "192.168.1.146"
        self.timeout = 5
        self.smooth_step = 2
        
        if os.path.exists(config_path):
            try:
                config.read(config_path, encoding='utf-8')
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è—Ä–∫–æ—Å—Ç–∏
                if 'Brightness' in config:
                    self.min_brightness = config.getint('Brightness', 'min_brightness', fallback=20)
                    self.max_brightness = config.getint('Brightness', 'max_brightness', fallback=100)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                if 'Averaging' in config:
                    self.averaging_period = config.getint('Averaging', 'averaging_period', fallback=60)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if 'Connection' in config:
                    self.esp_ip = config.get('Connection', 'esp_ip', fallback="192.168.1.146")
                    self.timeout = config.getint('Connection', 'timeout', fallback=5)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                if 'Smoothing' in config:
                    self.smooth_step = config.getint('Smoothing', 'smooth_step', fallback=2)
                
                self.max_history_size = self.averaging_period
                
                print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
                print(f"  –Ø—Ä–∫–æ—Å—Ç—å: {self.min_brightness}% - {self.max_brightness}%")
                print(f"  –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ: {self.averaging_period} —Å–µ–∫")
                print(f"  ESP IP: {self.esp_ip}")
                
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.ini: {e}")
                print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                self.max_history_size = 60
        else:
            print("‚ö† –§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.max_history_size = 60
    
    def save_calibration_if_changed(self, min_light, max_light):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ config.ini, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        config_path = os.path.join(os.path.dirname(__file__), 'config.ini')
        config = configparser.ConfigParser()
        
        if os.path.exists(config_path):
            config.read(config_path, encoding='utf-8')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é Calibration –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'Calibration' not in config:
            config['Calibration'] = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        saved_min = config.getint('Calibration', 'min_light', fallback=-1)
        saved_max = config.getint('Calibration', 'max_light', fallback=-1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if saved_min != min_light or saved_max != max_light:
            config['Calibration']['min_light'] = str(min_light)
            config['Calibration']['max_light'] = str(max_light)
            
            with open(config_path, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            
            print(f"üíæ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.ini: MIN={min_light}, MAX={max_light}")
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.control_window,
            text="üîÜ Auto OLED Brightness",
            font=("Segoe UI", 18, "bold"),
            bg='#2b2b2b',
            fg='white'
        ).pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_label = tk.Label(
            self.control_window,
            text="‚ö´ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
            font=("Segoe UI", 10),
            bg='#2b2b2b',
            fg='#ffaa00'
        )
        self.connection_label.pack(pady=5)
        
        # –¢–µ–∫—É—â–∞—è —è—Ä–∫–æ—Å—Ç—å
        self.brightness_label = tk.Label(
            self.control_window,
            text="100%",
            font=("Segoe UI", 36, "bold"),
            bg='#2b2b2b',
            fg='#00ff88'
        )
        self.brightness_label.pack(pady=15)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(
            self.control_window,
            length=400,
            mode='determinate',
            maximum=100
        )
        self.progress['value'] = 100
        self.progress.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_label = tk.Label(
            self.control_window,
            text=f"–î–∞—Ç—á–∏–∫: --- | –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∑–∞ {self.averaging_period} —Å–µ–∫",
            font=("Segoe UI", 8),
            bg='#2b2b2b',
            fg='#888888'
        )
        self.info_label.pack(pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            self.control_window,
            text=f"ESP8266: {self.esp_ip} | –Ø—Ä–∫–æ—Å—Ç—å: {self.min_brightness}-{self.max_brightness}%",
            font=("Segoe UI", 8),
            bg='#2b2b2b',
            fg='#666666'
        )
        self.status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        calibrate_btn = tk.Button(
            self.control_window,
            text="üõ†Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É ESP8266",
            command=self.open_calibration,
            bg='#404040',
            fg='white',
            relief='flat',
            padx=15,
            pady=5,
            font=("Segoe UI", 9)
        )
        calibrate_btn.pack(pady=5)
        
        # –ü–æ–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        author_label = tk.Label(
            self.control_window,
            text="STXN1SL0V3",
            font=("Segoe UI", 7),
            bg='#2b2b2b',
            fg='#444444'
        )
        author_label.place(relx=1.0, rely=1.0, anchor='se', x=-5, y=-5)
    
    def open_calibration(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import webbrowser
        webbrowser.open(f"http://{self.esp_ip}")
    
    def connect_to_esp(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP8266"""
        try:
            response = requests.get(f"http://{self.esp_ip}/api/brightness", timeout=5)
            if response.status_code == 200:
                self.connected = True
                self.connection_label.config(
                    text=f"üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP8266",
                    fg='#00ff88'
                )
            else:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
        except Exception as e:
            self.connected = False
            self.connection_label.config(
                text=f"üî¥ –ù–µ—Ç —Å–≤—è–∑–∏ —Å ESP8266",
                fg='#ff4444'
            )
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            self.control_window.after(10000, self.connect_to_esp)
    
    def smooth_brightness_loop(self):
        """–¶–∏–∫–ª –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏"""
        while self.running:
            # –ü–ª–∞–≤–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —è—Ä–∫–æ—Å—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π
            if abs(self.current_brightness - self.target_brightness) > 0.5:
                if self.current_brightness < self.target_brightness:
                    self.current_brightness += self.smooth_step
                    if self.current_brightness > self.target_brightness:
                        self.current_brightness = self.target_brightness
                else:
                    self.current_brightness -= self.smooth_step
                    if self.current_brightness < self.target_brightness:
                        self.current_brightness = self.target_brightness
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å
                self.control_window.after(0, self.apply_brightness, int(self.current_brightness))
            
            time.sleep(0.1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    
    def overlay_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è overlay - –¥–µ—Ä–∂–∏—Ç –µ–≥–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        while self.running:
            if self.overlay:
                try:
                    # –ü–æ–¥–Ω–∏–º–∞–µ–º overlay –∫–∞–∂–¥—ã–µ 50–º—Å —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                    self.overlay.lift()
                    self.overlay.attributes('-topmost', True)
                except:
                    pass
            time.sleep(0.05)  # 50 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = –ø–æ—á—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    
    def auto_brightness_loop(self):
        """–¶–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP8266 –∏ —Ä–∞—Å—á—ë—Ç —è—Ä–∫–æ—Å—Ç–∏"""
        while self.running:
            if self.connected:
                try:
                    response = requests.get(f"http://{self.esp_ip}/api/brightness", timeout=5)
                    data = response.json()
                    
                    # ESP –æ—Ç–¥–∞—ë—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
                    light_level = data['light_level']
                    min_light = data['min_light']
                    max_light = data['max_light']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ config.ini (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
                    self.save_calibration_if_changed(min_light, max_light)
                    
                    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                    light_level_constrained = max(min_light, min(max_light, light_level))
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Python
                    # map(value, fromLow, fromHigh, toLow, toHigh)
                    if max_light > min_light:
                        brightness = (light_level_constrained - min_light) * (self.max_brightness - self.min_brightness) / (max_light - min_light) + self.min_brightness
                    else:
                        brightness = self.min_brightness
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —è—Ä–∫–æ—Å—Ç–∏
                    brightness = max(self.min_brightness, min(self.max_brightness, brightness))
                    brightness = int(brightness)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                    self.brightness_history.append(brightness)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                    if len(self.brightness_history) > self.max_history_size:
                        self.brightness_history.pop(0)
                    
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                    current_time = time.time()
                    if current_time - self.last_average_time >= self.averaging_period:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if self.brightness_history:
                            avg_brightness = sum(self.brightness_history) / len(self.brightness_history)
                            self.target_brightness = int(avg_brightness)
                            self.last_average_time = current_time
                            
                            print(f"–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –∑–∞ {self.averaging_period} —Å–µ–∫: {self.target_brightness}% (–∏–∑ {len(self.brightness_history)} –∑–Ω–∞—á–µ–Ω–∏–π)")
                    else:
                        # –î–æ –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if len(self.brightness_history) <= 3:
                            # –í –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                            self.target_brightness = brightness
                            print(f"–ù–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏: {brightness}% (–¥–∞—Ç—á–∏–∫: {light_level})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self.control_window.after(0, self.update_interface, brightness, light_level)
                    
                except requests.exceptions.Timeout:
                    # –¢–∞–π–º-–∞—É—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ü–∏–∫–ª
                    print("–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                    time.sleep(2)
                    
                except requests.exceptions.ConnectionError:
                    # –ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å
                    self.connected = False
                    self.control_window.after(0, lambda: self.connection_label.config(
                        text="ÔøΩ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP8266...",
                        fg='#ffaa00'
                    ))
                    time.sleep(3)
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    self.control_window.after(0, self.connect_to_esp)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                    time.sleep(2)
            
            time.sleep(1)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def update_interface(self, brightness, light_level):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞)"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –¥–∞—Ç—á–∏–∫–∞ (–Ω–µ —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ)
        self.brightness_label.config(text=f"{int(self.target_brightness)}%")
        self.progress['value'] = int(self.target_brightness)
        self.info_label.config(text=f"üí° –î–∞—Ç—á–∏–∫: {light_level} | –¶–µ–ª–µ–≤–∞—è: {int(self.target_brightness)}% | –¢–µ–∫—É—â–∞—è: {int(self.current_brightness)}%")
    
    def update_brightness(self, brightness, light_level):
        """–£–°–¢–ê–†–ï–í–®–ê–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        pass
    
    def apply_brightness(self, brightness_value):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –æ–≤–µ—Ä–ª–µ–π"""
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
        darkness = 1.0 - (brightness_value / 100.0)
        
        if darkness > 0.01:
            if not self.overlay:
                self.create_overlay()
            
            self.overlay.attributes('-alpha', darkness)
            self.overlay.lift()
        else:
            if self.overlay:
                self.overlay.destroy()
                self.overlay = None
    
    def create_overlay(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–∫–æ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è"""
        if self.overlay:
            self.overlay.destroy()
        
        self.overlay = tk.Toplevel()
        self.overlay.attributes('-fullscreen', True)
        self.overlay.attributes('-topmost', True)
        self.overlay.attributes('-alpha', 0.0)
        self.overlay.configure(bg='black')
        self.overlay.overrideredirect(True)
        self.overlay.update_idletasks()
        
        try:
            import win32gui
            hwnd = int(self.overlay.frame(), 16)
            ex_style = win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE)
            new_ex_style = ex_style | win32con.WS_EX_LAYERED | win32con.WS_EX_TRANSPARENT
            win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE, new_ex_style)
            win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE, 
                                   new_ex_style | win32con.WS_EX_TOOLWINDOW)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ—è: {e}")
    
    def create_tray_icon_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç—Ä–µ—è"""
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å icon.ico, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        if os.path.exists(self.icon_path):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ .ico —Ñ–∞–π–ª–∞
                image = Image.open(self.icon_path)
                # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ .ico
                if hasattr(image, 'size'):
                    return image
            except:
                pass
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å - —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        width = 64
        height = 64
        image = Image.new('RGB', (width, height), color='black')
        dc = ImageDraw.Draw(image)
        
        # –†–∏—Å—É–µ–º —Å–æ–ª–Ω—ã—à–∫–æ
        dc.ellipse([16, 16, 48, 48], fill='#00ff88', outline='#00ff88')
        
        return image
    
    def show_window(self, icon=None, item=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è"""
        self.control_window.deiconify()
        self.control_window.attributes('-topmost', True)
        self.window_visible = True
    
    def hide_window(self):
        """–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤ —Ç—Ä–µ–π"""
        self.control_window.withdraw()
        self.window_visible = False
        
        if self.tray_icon is None:
            # –°–æ–∑–¥–∞—ë–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
            icon_image = self.create_tray_icon_image()
            menu = pystray.Menu(
                pystray.MenuItem("–ü–æ–∫–∞–∑–∞—Ç—å", self.show_window, default=True),
                pystray.MenuItem("–í—ã—Ö–æ–¥", self.quit_app)
            )
            self.tray_icon = pystray.Icon("OLED Brightness", icon_image, "OLED Auto Brightness", menu)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.tray_icon.run, daemon=True).start()
    
    def quit_app(self, icon=None, item=None):
        """–ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
        if self.tray_icon:
            self.tray_icon.stop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞
        if self.overlay:
            try:
                self.overlay.destroy()
            except:
                pass
        
        try:
            self.control_window.destroy()
        except:
            pass
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.control_window.protocol("WM_DELETE_WINDOW", self.hide_window)
        self.control_window.mainloop()
    
    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (—É—Å—Ç–∞—Ä–µ–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hide_window)"""
        self.hide_window()


def main():
    app = SimpleBrightnessControl()
    app.run()


if __name__ == "__main__":
    main()
